// Code generated by addchain. DO NOT EDIT.

func add_chain_exp_d_inv(api frontend.API, x frontend.Variable) frontend.Variable {
	// Computation is derived from the addition chain:
	//
	//	_10      = 2*1
	//	_100     = 2*_10
	//	_101     = 1 + _100
	//	_111     = _10 + _101
	//	_1010    = 2*_101
	//	_1011    = 1 + _1010
	//	_1101    = _10 + _1011
	//	_1111    = _10 + _1101
	//	_10001   = _10 + _1111
	//	_10011   = _10 + _10001
	//	_10111   = _100 + _10011
	//	_100001  = _1010 + _10111
	//	_100011  = _10 + _100001
	//	_100101  = _10 + _100011
	//	_100111  = _10 + _100101
	//	_101011  = _100 + _100111
	//	_101111  = _100 + _101011
	//	_110011  = _100 + _101111
	//	_110101  = _10 + _110011
	//	_111001  = _100 + _110101
	//	_111101  = _100 + _111001
	//	_1011100 = _100011 + _111001
	//	i42      = ((_1011100 << 6 + _101111) << 6 + _100001) << 6
	//	i56      = ((_111101 + i42) << 6 + _110101) << 5 + _10111
	//	i80      = ((i56 << 6 + _10111) << 8 + _100011) << 8
	//	i95      = ((_100001 + i80) << 6 + _110011) << 6 + _100001
	//	i118     = ((i95 << 7 + _100101) << 8 + _101011) << 6
	//	i135     = ((_1101 + i118) << 8 + _110011) << 6 + _101011
	//	i161     = ((i135 << 6 + _100111) << 3 + _111) << 15
	//	i176     = ((_10001 + i161) << 5 + 1) << 7 + _111101
	//	i195     = ((2*i176 + _101) << 10 + _111001) << 6
	//	i211     = ((_100111 + i195) << 5 + _10011) << 8 + _110011
	//	i236     = ((i211 << 7 + _1111) << 9 + _110011) << 7
	//	i255     = ((_10011 + i236) << 8 + _110011) << 8 + _110011
	//	i279     = ((i255 << 8 + _110011) << 6 + _1011) << 8
	//	i298     = ((_110011 + i279) << 8 + _110011) << 8 + _110011
	//	return     i298 << 6 + _1101
	//
	// Operations: 250 squares 55 multiplies
	//
	// Generated by github.com/mmcloughlin/addchain v0.4.0.

	// Allocate Temporaries.
	var t0 frontend.Variable
	var t1 frontend.Variable
	var t2 frontend.Variable
	var t3 frontend.Variable
	var t4 frontend.Variable
	var t5 frontend.Variable
	var t6 frontend.Variable
	var t7 frontend.Variable
	var t8 frontend.Variable
	var t9 frontend.Variable
	var t10 frontend.Variable
	var t11 frontend.Variable
	var t12 frontend.Variable
	var t13 frontend.Variable
	var t14 frontend.Variable
	var t15 frontend.Variable
	var t16 frontend.Variable
	var t17 frontend.Variable
	t5 = api.Mul(x, x)

	t7 = api.Mul(t5, t5)

	t6 = api.Mul(x, t7)

	t9 = api.Mul(t5, t6)

	t0 = api.Mul(t6, t6)

	t1 = api.Mul(x, t0)

	z = api.Mul(t5, t1)

	t3 = api.Mul(t5, z)

	t8 = api.Mul(t5, t3)

	t2 = api.Mul(t5, t8)

	t14 = api.Mul(t7, t2)

	t12 = api.Mul(t0, t14)

	t13 = api.Mul(t5, t12)

	t11 = api.Mul(t5, t13)

	t4 = api.Mul(t5, t11)

	t10 = api.Mul(t7, t4)

	t16 = api.Mul(t7, t10)

	t0 = api.Mul(t7, t16)

	t15 = api.Mul(t5, t0)

	t5 = api.Mul(t7, t15)

	t7 = api.Mul(t7, t5)

	t17 = api.Mul(t13, t5)

	for s := 0; s < 6; s++ {
		t17 = api.Mul(t17, t17)
	}

	t16 = api.Mul(t16, t17)

	for s := 0; s < 6; s++ {
		t16 = api.Mul(t16, t16)
	}

	t16 = api.Mul(t12, t16)

	for s := 0; s < 6; s++ {
		t16 = api.Mul(t16, t16)
	}

	t16 = api.Mul(t7, t16)

	for s := 0; s < 6; s++ {
		t16 = api.Mul(t16, t16)
	}

	t15 = api.Mul(t15, t16)

	for s := 0; s < 5; s++ {
		t15 = api.Mul(t15, t15)
	}

	t15 = api.Mul(t14, t15)

	for s := 0; s < 6; s++ {
		t15 = api.Mul(t15, t15)
	}

	t14 = api.Mul(t14, t15)

	for s := 0; s < 8; s++ {
		t14 = api.Mul(t14, t14)
	}

	t13 = api.Mul(t13, t14)

	for s := 0; s < 8; s++ {
		t13 = api.Mul(t13, t13)
	}

	t13 = api.Mul(t12, t13)

	for s := 0; s < 6; s++ {
		t13 = api.Mul(t13, t13)
	}

	t13 = api.Mul(t0, t13)

	for s := 0; s < 6; s++ {
		t13 = api.Mul(t13, t13)
	}

	t12 = api.Mul(t12, t13)

	for s := 0; s < 7; s++ {
		t12 = api.Mul(t12, t12)
	}

	t11 = api.Mul(t11, t12)

	for s := 0; s < 8; s++ {
		t11 = api.Mul(t11, t11)
	}

	t11 = api.Mul(t10, t11)

	for s := 0; s < 6; s++ {
		t11 = api.Mul(t11, t11)
	}

	t11 = api.Mul(z, t11)

	for s := 0; s < 8; s++ {
		t11 = api.Mul(t11, t11)
	}

	t11 = api.Mul(t0, t11)

	for s := 0; s < 6; s++ {
		t11 = api.Mul(t11, t11)
	}

	t10 = api.Mul(t10, t11)

	for s := 0; s < 6; s++ {
		t10 = api.Mul(t10, t10)
	}

	t10 = api.Mul(t4, t10)

	for s := 0; s < 3; s++ {
		t10 = api.Mul(t10, t10)
	}

	t9 = api.Mul(t9, t10)

	for s := 0; s < 15; s++ {
		t9 = api.Mul(t9, t9)
	}

	t8 = api.Mul(t8, t9)

	for s := 0; s < 5; s++ {
		t8 = api.Mul(t8, t8)
	}

	t8 = api.Mul(x, t8)

	for s := 0; s < 7; s++ {
		t8 = api.Mul(t8, t8)
	}

	t7 = api.Mul(t7, t8)

	t7 = api.Mul(t7, t7)

	t6 = api.Mul(t6, t7)

	for s := 0; s < 10; s++ {
		t6 = api.Mul(t6, t6)
	}

	t5 = api.Mul(t5, t6)

	for s := 0; s < 6; s++ {
		t5 = api.Mul(t5, t5)
	}

	t4 = api.Mul(t4, t5)

	for s := 0; s < 5; s++ {
		t4 = api.Mul(t4, t4)
	}

	t4 = api.Mul(t2, t4)

	for s := 0; s < 8; s++ {
		t4 = api.Mul(t4, t4)
	}

	t4 = api.Mul(t0, t4)

	for s := 0; s < 7; s++ {
		t4 = api.Mul(t4, t4)
	}

	t3 = api.Mul(t3, t4)

	for s := 0; s < 9; s++ {
		t3 = api.Mul(t3, t3)
	}

	t3 = api.Mul(t0, t3)

	for s := 0; s < 7; s++ {
		t3 = api.Mul(t3, t3)
	}

	t2 = api.Mul(t2, t3)

	for s := 0; s < 8; s++ {
		t2 = api.Mul(t2, t2)
	}

	t2 = api.Mul(t0, t2)

	for s := 0; s < 8; s++ {
		t2 = api.Mul(t2, t2)
	}

	t2 = api.Mul(t0, t2)

	for s := 0; s < 8; s++ {
		t2 = api.Mul(t2, t2)
	}

	t2 = api.Mul(t0, t2)

	for s := 0; s < 6; s++ {
		t2 = api.Mul(t2, t2)
	}

	t1 = api.Mul(t1, t2)

	for s := 0; s < 8; s++ {
		t1 = api.Mul(t1, t1)
	}

	t1 = api.Mul(t0, t1)

	for s := 0; s < 8; s++ {
		t1 = api.Mul(t1, t1)
	}

	t1 = api.Mul(t0, t1)

	for s := 0; s < 8; s++ {
		t1 = api.Mul(t1, t1)
	}

	t0 = api.Mul(t0, t1)

	for s := 0; s < 6; s++ {
		t0 = api.Mul(t0, t0)
	}

	z = api.Mul(z, t0)

	return z
}

